generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ConditionType {
  is_empty
  not_empty
  equals
  not_equals
  greater_than
  less_than
  between
  contains
  starts_with
  ends_with
}

enum DataType {
  string
  number
  boolean
  date
}

enum ElementType {
  input
  textarea
  select
  checkbox
  radio
}

enum ContactStatus {
  active
  inactive
  blocked
}

enum CampaignStatus {
  active
  inactive
  paused
  finished
}

enum MessageChannel {
  SMS
  EMAIL
  WHATSAPP
  PUSH_NOTIFICATION
  OTHER
}

enum MessageStatus {
  pending
  queued
  processing
  sent
  failed
  expired
}

enum DeliveryStatus {
  pending
  delivered
  undelivered
}

enum ContentType {
  plain_text
  html
}

enum Weekday {
  MO
  TU
  WE
  TH
  FR
  SA
  SU
}

enum Frequency {
  DAILY
  WEEKLY
  MONTHLY
}

enum RechargeStatus {
  pending
  completed
  failed
}

model Organization {
  id        Int       @id @default(autoincrement())
  name      String    @unique
  domain    String?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  users         User[]
  contacts      Contact[]
  campaigns     Campaign[]
  customFields  CustomField[]
  subscriptions Subscription[]
  auditLog      AuditLog[]
  sentMessages  SentMessage[]
  recharges     Recharge[]

  @@index([name])
}

model User {
  id             Int          @id @default(autoincrement())
  name           String
  email          String       @unique
  password       String
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  deletedAt      DateTime?

  userRoles UserRole[]
  auditLog  AuditLog[]

  @@index([email])
}

model Role {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  userRoles       UserRole[]
  rolePermissions RolePermission[]
}

model Permission {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt

  rolePermissions RolePermission[]
}

model UserRole {
  id     Int @id @default(autoincrement())
  userId Int
  roleId Int

  user User @relation(fields: [userId], references: [id])
  role Role @relation(fields: [roleId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([userId, roleId])
}

model RolePermission {
  id           Int @id @default(autoincrement())
  roleId       Int
  permissionId Int

  role       Role       @relation(fields: [roleId], references: [id])
  permission Permission @relation(fields: [permissionId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([roleId, permissionId])
}

model AuditLog {
  id            Int      @id @default(autoincrement())
  action        String
  changes       Json?
  correlationId String?
  path          String?
  recordId      Int?
  table         String
  timestamp     DateTime @default(now())

  userId         Int
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@index([userId, recordId, table, timestamp])
}

model Contact {
  id          Int           @id @default(autoincrement())
  name        String
  lastName    String?
  birthDate   DateTime?
  email       String?
  phone       String?
  countryCode String?
  status      ContactStatus @default(active)

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  customValue  CustomValue[]
  sentMessages SentMessage[]

  @@index([email, phone])
}

model CustomField {
  id          Int         @id @default(autoincrement())
  fieldName   String
  elementType ElementType
  dataType    DataType
  options     Json?

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?

  customValue   CustomValue[]
  campaignRules CampaignRule[]
}

model CustomValue {
  id    Int  @id @default(autoincrement())
  value Json

  contactId     Int
  contact       Contact     @relation(fields: [contactId], references: [id])
  customFieldId Int
  customField   CustomField @relation(fields: [customFieldId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Campaign {
  id          Int            @id @default(autoincrement())
  name        String
  description String
  content     String
  contentType ContentType
  status      CampaignStatus @default(active)
  days        Weekday[]
  frequency   Frequency

  startDate DateTime
  endDate   DateTime?
  time      String
  rrule     String?

  providerId     Int
  provider       Provider     @relation(fields: [providerId], references: [id])
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?

  campaignRules    CampaignRule[]
  sentMessage      SentMessage[]
  campaignDispatch CampaignDispatch[]
}

model CampaignRule {
  id            Int           @id @default(autoincrement())
  conditionType ConditionType
  value         Json

  campaignId    Int
  campaign      Campaign    @relation(fields: [campaignId], references: [id])
  customFieldId Int
  customField   CustomField @relation(fields: [customFieldId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model CampaignDispatch {
  id             Int      @id @default(autoincrement())
  campaignId     Int
  sentAt         DateTime
  totalSent      Int      @default(0)
  totalDelivered Int      @default(0)
  totalFailed    Int      @default(0)
  notes          String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  campaign     Campaign      @relation(fields: [campaignId], references: [id])
  sentMessages SentMessage[]

  @@index([campaignId, sentAt])
}

model Channel {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  providers ChannelProvider[]
}

model Provider {
  id          Int    @id @default(autoincrement())
  name        String @unique
  authMethod  String
  config      Json
  dataMapping Json

  channelProviders ChannelProvider[]
  campaigns        Campaign[]
  sentMessages     SentMessage[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model ChannelProvider {
  id         Int @id @default(autoincrement())
  channelId  Int
  providerId Int
  priority   Int @default(1)

  channel  Channel  @relation(fields: [channelId], references: [id])
  provider Provider @relation(fields: [providerId], references: [id])

  @@unique([channelId, providerId])
}

model PaymentProvider {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  config      Json
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  deletedAt   DateTime?

  payments Payment[]
}

model Payment {
  id                Int             @id @default(autoincrement())
  amount            Float
  method            String
  paymentProviderId Int
  paymentProvider   PaymentProvider @relation(fields: [paymentProviderId], references: [id])
  status            String          @default("pending")
  transactionId     String

  notes String?

  recharge Recharge?

  subscriptionId Int?
  subscription   Subscription? @relation(fields: [subscriptionId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}

model Subscription {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  planId Int
  plan   Plan @relation(fields: [planId], references: [id])

  startDate     DateTime
  endDate       DateTime
  nextResetDate DateTime
  messageUsage  Int      @default(0)
  campaignLimit Int      @default(0)
  contactLimit  Int      @default(0)

  payments Payment[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Recharge {
  id             Int          @id @default(autoincrement())
  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])
  paymentId      Int?         @unique
  payment        Payment?     @relation(fields: [paymentId], references: [id])

  amount       Float
  messageCount Int

  remainingAmount   Float
  remainingMessages Int

  status      RechargeStatus @default(pending)
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @updatedAt
  deletedAt   DateTime?
  SentMessage SentMessage[]
}

model Plan {
  id              Int     @id @default(autoincrement())
  name            String
  description     String?
  messageLimit    Int
  contactLimit    Int     @default(0)
  campaignLimit   Int     @default(0)
  cost            Float
  pricePerMessage Float

  subscriptions Subscription[]

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model SentMessage {
  id               Int            @id @default(autoincrement())
  content          String
  contentType      ContentType
  channel          MessageChannel
  status           MessageStatus  @default(pending)
  sentAt           DateTime?
  deliveryStatus   DeliveryStatus @default(pending)
  deliveryInfo     Json?
  providerResponse Json?
  messageId        String?

  providerId Int
  provider   Provider @relation(fields: [providerId], references: [id])

  campaignId Int?
  campaign   Campaign? @relation(fields: [campaignId], references: [id])

  campaignDispatchId Int?
  campaignDispatch   CampaignDispatch? @relation(fields: [campaignDispatchId], references: [id])

  contactId Int?
  contact   Contact? @relation(fields: [contactId], references: [id])

  rechargeId Int?
  recharge   Recharge? @relation(fields: [rechargeId], references: [id])

  organizationId Int
  organization   Organization @relation(fields: [organizationId], references: [id])

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now())
  deletedAt DateTime?
}
